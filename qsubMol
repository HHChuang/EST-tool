#!/bin/bash
#################################################################################
# Program :								   									    #
#	Create file(s) to manipulate how to submit Molpro input file(s) in          #
#   remote server(s).                                                           #
#                                                                               #
#   Five classifications of jobs are provided:                                  #
#   1. single input files                                                       #
#   2. all the input files in the same folder                                   #
#   3. fial jobs                                                                #
#   4. selected input files which are include in a list                         #
#   5. selected input files which are typed manually                            #
#                                                                               #
# Input:									   								    #
#   $1 has several options                                                      #
#   1. test.inp; submit one Gaussian input file.                                #
#	2. 'all'; submit all Gaussian input files.			   					    #
#   3. 'fail'; submit input files if the previous calculation failed.           #
#   4. 'list.dat'; submit selected files in list.dat                            #
#				   				                                                #
#   If the number of command-line auguments are more than one, then it goes to  #
#   submit selected input files.                                                #
#   example:                                                                    #
#   > qsubGau test1.inp test2.inp test3.inp                                     #
#   Then, it submits 3 selected input files.                                    #
#				   				                                                #
# Output:								   									    #
#	*.sge (submitted file)					   								    #
#                                                                               #
# History:                                                                      #
# 2020/08/17, Grace, copy from qsubGau, and modify $PATH.                       #
#                                                                               #
#################################################################################

inp_ext='.inp'
out_ext='.out'

# Main program
function main(){
	# 1. std-out announcement
	stdout 
    
    # 2. check the input arguments 
    checkArg $# $1 # output: $? = $mode = 1 - 5
    mode=$? # 1. single job, 2. all jobs, 3. fail jobs, 4. selected jobs in a list, 5. selected jobs by typing their name
    
    # 2. count gaussian input into a list
    Arg=$@ # still one variable
    genlist $mode $Arg # output: list.dat 
    
    # 3. user defined: select the amount of nodes
    selectNumNode list.dat # output: $? = $Nnode
    Nnode=$? 

    # 4. generate the header of submitted files
    genSGEfile $Nnode list.dat # output: SGElist.dat 

    # 5. submit files
    for name in `cat SGElist.dat`
    do 
        qsub $name 
    done 
    rm -f SGElist.dat list.dat
}

function stdout(){
cat << EOF
--------------------------------------------------------
qsubGau has 5 modes to submit Gaussian input files: 
1. single job; \$1 = test$inp_ext
2. all jobs; \$1 = 'all'
3. failed jobs; \$1 = 'fail'
4. selected a losts jobs; \$1 = 'list.dat'
5. selected small amount jobs; more than one command-line arguments.
--------------------------------------------------------
EOF
}

function checkArg(){
    # $1 = numbers of command-line arguments
    # $2 = the first command-line argument
    if [ "$1" == '' ] 
    then 
        echo 'Empty command-line argument. Stop program.' 
        exit
    elif [ "$1" == 1 ] # mode 1 to 4
    then 
        if [ "$2" == 'all' ] # mode 2
        then 
            testall=$(ls | grep -c $inp_ext )
            if [ "$testall" == 0 ] 
            then 
                echo 'No G16 input file; filename extension is "$inp_ext". Stop program.' 
                exit
            fi 
            return 2
        elif [ "$2" == 'fail' ] # mode 3
        then 
            return 3
        elif [ "$2" == 'list.dat' ] # mode 4
        then
            if [ -f list.dat ]
            then
                if [ ! -s list.dat ]
                then
                    echo 'list.dat is a empry file. Stop program.'
                    exit
                fi 
            else 
                echo 'list.dat is not exist. Stop program.'
                exit 
            fi 
            return 4
        else      # mode 1
            return 1
        fi 
    elif [ "$1" -gt 1 ] # mode 5
    then 
        return 5
    else 
        echo 'Bug in command-line arguments. Stop program.'
        exit
    fi 
}

function genlist(){
    #   $1 = $mode  
    #   $2 = name of input; 'all'; 'fail'; 'list.dat'; or more than one arguments.
    allArg=(`echo $@`) 
    if [ "${allArg[0]}" -eq 1 ] # single job
    then 
        echo $2 | sed "s/$inp_ext//g" > list.dat 
    elif [ "${allArg[0]}" -eq 2 ] # all jobs
    then
        ls | grep $inp_ext  | sed "s/$inp_ext//g" > list.dat
    elif [ "${allArg[0]}" -eq 3 ] # failed jobs
    then 
        ls | grep '.log' | sed 's/.log//g' > alljobs.dat 
        rm -f list.dat 
        touch list.dat 
        for name in `cat alljobs.dat`
        do 
            num=$(grep -c 'Normal termination of Gaussian' $name.log )
            if [ "$num" -eq 0 ]
            then 
                echo $name >> list.dat 
            fi
        done 
        if [ ! -s list.dat ]
        then
            echo 'No failed jobs in the current folder.'
            echo 'Please change mode. Stop program.'
            exit
        fi 
        rm -f alljobs.dat 
    elif [ "${allArg[0]}" -eq 4 ] # selected jobs in a list
    then
        num=$(grep -c $inp_ext list.dat)
        if [ "$num" -gt 0 ]
        then 
            cat list.dat | sed "s/$inp_ext//g" > tmplist.dat 
            mv -f tmplist.dat list.dat 
        else 
            echo "Wrong format in the list.dat. Stop program."
            exit
        fi 
    elif [ "${allArg[0]}" -eq 5 ] # selected jobs by typing their name
    then 
        rm -f list.dat 
        for ((i=1;i<${#allArg[@]};i++ ))
        do 
            echo ${allArg[$i]} | sed "s/$inp_ext//g">> list.dat 
        done
    else 
        echo 'Bug in function genlist(). Stop program.'
        exit
    fi 
}

function selectNumNode(){
    # $1 = list.dat 
    njobs=$(wc -l $1 | awk '{print $1}')
    if [ $njobs -eq 1 ]
    then
        return 1
    else
        echo '--------------------------------------------------------'
        echo "Amount of jobs: $njobs"
        echo ''
        read -p 'How many nodes do you want? ' Nnode
        echo '--------------------------------------------------------'
        if [ $Nnode -gt $njobs ] 
        then 
            echo "Amount of node ($Nnode) is larger than jobs ($njobs). Stop program." 
            exit
        fi
        return $Nnode 
    fi
}

function genSGEfile(){
    # $1 = Nnode
    # $2 = list.dat 

    Node=$1
    njobs=$(wc -l $2 | awk '{print $1}')
    jobname=( `cat $2` )
    if [ $njobs -eq 1 ] 
    then 
        #initial setting: SGE name = file name 
        sgename=$jobname

        # change SGE filename if the original one exists
        check_sgename=$(checkSGEfilename $sgename) 
        
        SGEheader $check_sgename # output: $check_filename.sge 
        SGEfoot $check_sgename $jobname # output: $check_filename.sge 
        echo $check_sgename\.sge > SGElist.dat 
    else
        quotient=$(( $njobs/$1 ))
        remainder=$(( $njobs%$1 ))
        # sgelist=(Vodka Whiskey Brandy Vermouth Cognac Beer PortWine Rum Gin)
        sgelist=(WagakkiBand SuzuhanaYuko Machiya NinagawaBeni IbukuroKiyoshi Asa KaminagaDaisuke Wasabi Kurona)
        
        rm -f SGElist.dat 
        ini_job=0
        for ((Node_i=1;Node_i<=$Node;Node_i++))
        do 
            sgename=${sgelist[$(( $RANDOM%9 ))]}
            check_sgename=$(checkSGEfilename $sgename) 
            SGEheader $check_sgename
            
            # allocate amount of input files in one SGE file
            if [ "$remainder" -eq 0 ]
            then 
                joblen=$quotient
            else
                if [ "$Node_i" -le $remainder ]
                then
                    joblen=$(( $quotient + 1 ))
                else 
                    joblen=$quotient
                fi 
            fi 
            part_jobname=${jobname[@]:$ini_job:$joblen}
            ini_job=$(( $ini_job + $joblen ))
            
            SGEfoot $check_sgename $part_jobname
            echo $check_sgename\.sge >> SGElist.dat 
        done 
    fi  
}

function checkSGEfilename(){
    # $1 = $filename 
    nSameSGE=$( ls | grep "$1" | grep -c 'sge$' ) 
    if [ "$nSameSGE" == 0 ]
    then
        echo $1
    else 
        echo $1\_$nSameSGE 
    fi 
}

function SGEheader(){
    # $1 = $filename
cat << EOF > $1.sge
#!/bin/bash
############################################################
#  Program :                                               #
#       Submit the Molpro job through SGE(sun grid engine) #
############################################################
# Grace, d02223134@g.ntu.edu.tw

### Default Control
#$ -S /bin/sh -w w -j y -cwd 	### Run job through bash shell
#$ -j y							### Join stdout and stderr
##$ -l hostname='q9*|q8*|q7*|q1*'			### Resource control
#$ -cwd							### Use current working directory

### SGE Environment
echo '== SGE Environment =='
echo "Working directory is \$SGE_O_WORKDIR"
cd \$SGE_O_WORKDIR

echo 'Job starts'
echo "    Host: \$HOSTNAME"
echo '    Date:' `date`
echo 'Directory:' `pwd` 

### Molpro Setup 
export MOLPRO_EXEDIR=/opt/molpro/molpro_2019_2_linux_x86_64_i8/bin
export MOLPRO_EXE=\$MOLPRO_EXEDIR/molpro
export PATH=\$MOLPRO_EXEDIR:$PATH

### Job Script
echo "Your job:"
EOF
}

function SGEfoot(){
    # $1 = SGE filename 
    # $2 = array of jobname
    selected_jobname=(`echo $@`)
    sgefile=${selected_jobname[0]}
    for ((i=1;i<${#selected_jobname[@]};i++))
    do 
        echo "time \$MOLPRO_EXE  -W \$SGE_O_WORKDIR  < ${selected_jobname[$i]}$inp_ext  > ${selected_jobname[$i]}$out_ext" >> $sgefile\.sge 
    done 
}

main $@
